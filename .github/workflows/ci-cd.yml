name: CI/CD Pipeline
on:
  pull_request:
    branches:
      - stage
      - release
      - main
jobs:
  test-user-dao:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run UserDaoImplTest
        run: |
          # Assuming Maven; adjust for your project structure
          mvn clean test -Dtest=UserDaoImplTest
      - name: Check Test Results
        run: |
          # More reliable way to check test results
          mvn test -Dtest=UserDaoImplTest
  merge-validation:
    needs: test-user-dao
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'stage'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate Merge Target
        run: |
          # Ensure PR is from dev to stage
          if [[ "${{ github.head_ref }}" != "dev" ]]; then
            echo "Error: Pull requests to stage must be from the dev branch"
            exit 1
          fi
  build:
    needs: [test-user-dao, merge-validation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build Project
        run: mvn clean package -DskipTests
      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: target/*.jar
  deployment:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: package
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment"
          # Add your actual deployment commands here
